{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["query","render","data","site","siteMetadata","description","social","href","twitter","instagram","github","Container","styled","Index","this","props","siteTitle","title","posts","allMarkdownRemark","edges","keywords","className","map","node","excerpt","frontmatter","fields","slug","key","to","date","React","Component","pageQuery"],"mappings":"wJAgBe,aACb,OACE,kBAAC,IAAD,CACEA,MAAK,aAcLC,OAAQ,SAACC,GAA0B,MACHA,EAAKC,KAAKC,aAAjCC,EAD0B,EAC1BA,YAAaC,EADa,EACbA,OACpB,OACE,6BACE,4BAAKD,GACL,4CAEE,6BACA,uBAAGE,KAAMD,EAAOE,SAAhB,WACC,MACD,uBAAGD,KAAMD,EAAOG,WAAhB,aACC,MACD,uBAAGF,KAAMD,EAAOI,QAAhB,aA3BV,U,6NCNJ,IAAMC,EAAYC,YAAO,MAAPA,CAAH,KAIMC,E,gLACnBZ,OAAA,WAAS,IACAC,EAAQY,KAAKC,MAAbb,KACDc,EAAYd,EAAKC,KAAKC,aAAaa,MACnCC,EAAQhB,EAAKiB,kBAAoBjB,EAAKiB,kBAAkBC,MAAQ,GAEtE,OACE,kBAAC,IAAD,CAAQH,MAAOD,GACb,kBAAC,IAAD,CAAMC,MAAM,YAAYI,SAAU,CAAC,OAAD,iCAClC,kBAAC,EAAD,MACA,kBAACV,EAAD,KACE,yBAAKW,UAAS,gBACXJ,EAAMK,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLC,EAAUD,EAAKE,YAAYD,SAAWD,EAAKC,QAC3CR,EAAQO,EAAKE,YAAYT,OAASO,EAAKG,OAAOC,KACpD,OACE,yBAAKC,IAAKL,EAAKG,OAAOC,MACpB,4BACE,kBAAC,IAAD,CAAME,GAAIN,EAAKG,OAAOC,MAAOX,IAE/B,+BAAQO,EAAKE,YAAYK,MACzB,2BAAIN,W,GArBaO,IAAMC,WAuD5BC,EAAY,c","file":"component---src-pages-index-tsx-a0e0185b64c28e613576.js","sourcesContent":["import React from 'react'\nimport {StaticQuery, graphql} from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string\n      social: {\n        twitter: string\n        instagram: string\n        github: string\n      }\n    }\n  }\n}\n\nexport default function() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              description\n              social {\n                twitter\n                instagram\n                github\n              }\n            }\n          }\n        }\n      `}\n      render={(data: StaticQueryData) => {\n        const {description, social} = data.site.siteMetadata\n        return (\n          <div>\n            <h1>{description}</h1>\n            <p>\n              By Jeff Rafter\n              <br />\n              <a href={social.twitter}>Twitter</a>\n              {' / '}\n              <a href={social.instagram}>Instagram</a>\n              {' / '}\n              <a href={social.github}>GitHub</a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport {Link, graphql} from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport Bio from '../components/bio'\nimport {styled} from '../styles/theme'\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nconst Container = styled('div')`\n  margin-top: 100px;\n`\n\nexport default class Index extends React.Component<Props> {\n  render() {\n    const {data} = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark ? data.allMarkdownRemark.edges : []\n\n    return (\n      <Layout title={siteTitle}>\n        <Head title=\"All posts\" keywords={[`blog`, `gatsby`, `javascript`, `react`]} />\n        <Bio />\n        <Container>\n          <div className={`page-content`}>\n            {posts.map(({node}) => {\n              const excerpt = node.frontmatter.excerpt || node.excerpt\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <div key={node.fields.slug}>\n                  <h3>\n                    <Link to={node.fields.slug}>{title}</Link>\n                  </h3>\n                  <small>{node.frontmatter.date}</small>\n                  <p>{excerpt}</p>\n                </div>\n              )\n            })}\n          </div>\n        </Container>\n      </Layout>\n    )\n  }\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n          excerpt: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 2500)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}