{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Jeff Rafter","keywords":["jeffrafter","how-to","blog"]}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"I’ve always wanted to be able to work with hardware and put together interesting and complex circuits in the same way I’ve been able to build software. Before I was a teenager my grandfather bought me the now classic Getting Started In Electronics which has been called The Greatest Electronics Book Ever Written. I struggled to understand it and never had the parts to try out the circuits; working instead with pencil and paper and ending up confused. These days it is pretty easy to get lots of parts cheaply to try things out.  Buy some parts To get started it is good to have some electronics to play with. We’ll need: Any Arduino (preferably an ESP8266 based device) Breadboard LED A  resistor Some jumper wires Micro-USB cable These parts are often hard to find individually so I tend to buy them in kits. I purchased the following: ESP8266 NodeMCU: https://www.amazon.com/gp/product/B081CSJV2V ($13.99 pack of 3) Smraza Basic Starter Kit: https://www.amazon.com/Arduino-Starter-Tutorials-Compatible-Mega2560/dp/B01MATM4XF ($19.98) Micro-USB cables: https://www.amazon.com/gp/product/B07V6GZ5GM ($7.99 pack of 5) Wall chargers (2.1A 5V): https://www.amazon.com/gp/product/B082TZZJZR ($9.99 pack of 3) You don’t need to buy multiples (often I buy three of each thing), but I’ve found I want to have multiple projects going at once. You might have micro-USB and wall chargers laying around which should be fine: just make sure they are 5V, ~2A  and that the cables are data cables. The Smraza Basic Starter Kit has a ton of parts - most of which we aren’t going to use here; but the kit is great and allows you to build all kinds of projects in the future.  Setup a circuit \n(designed on https://tinkercad.com) About breadboards Setting up a breadboard like this makes it easy to test simple circuits without needing to solder anything. You can connect different components using jumper wires (normal wires, that you push into the various holes on the breadboard). The breadboard makes it easy to do this because certain holes of the breadboard are connected internally. It is tough to guess how everything is connected if you are looking at a breadboard for the first time.  The breadboard has two halves, each with two “power rails” (red and black in the above diagram). Each row is connected: for example row : , , ,  and  are all connected internally (shown in green above). The gap running down the center of the breadboard separates the two sides.  The , , , ,  slots are all connected and…","fields":{"slug":"/getting-started-with-arduino-and-esp8266/"},"frontmatter":{"excerpt":"Understanding the basics of hardware can open new projects and new possibilities and it is more accessible and inexpensive than ever.","date":"May 20, 2020","title":"Getting started with ESP8266 and Arduino"}}},{"node":{"excerpt":"Previously, I posted about Working with GitHub Actions. It covered the basics of setting up a repository, configuring embedded actions and the associated workflows. If you haven’t worked with GitHub Actions before, you might want to read that first. Once you’ve created your amazing GitHub Actions, you’ll want to re-use them and share them with your friends. To do that you’ll want to organize your project a little differently. Also, you’ll want to release your actions with all of the dependencies included so that they run efficiently. In this post we’ll create a repository which contains a GitHub Action - built in TypeScript - and a second repository which will use the action. Before you read this it is important to note: starting with a template will save you a lot of time and setup. Creating actions can be very simple. In this post, however, I am going to work through and explain all of the steps. Included in this post are some of the reasons I’ve chosen one particular setup and skipped another. When getting started with GitHub Actions it is difficult to understand how all of the pieces fit together, or why you might want to create an action for a particular task. Hopefully this post provides some helpful examples. That said, there are probably steps here that you’ve seen before, don’t care about, or just want to skip and that’s okay. In order to follow this, you’ll need a GitHub account. You’ll need Node, Node Version Manager (), and Node Package Manager (). The examples will be in TypeScript. All of the code is available at https://github.com/jeffrafter/honk-action. Honk For our example we’ll create a GitHub Action which listens for new issue comments - if the comment doesn’t contain the word “honk” our action will delete the comment and add a new comment with a picture of the goose from Untitled Goose Game. This isn’t very practical, but it should serve as a good foundation for building actions that respond to comments. Here is the layout for our action: Notice that  and  are both in the root of our repository. In this case our action is not very complex, using only a single file. If you have a complex action which contains many modules it might make sense to to put these into a  or  folder. We’ll dig into each of these files. Setup First you want to create a folder for your project:  Environment As we did in the previous post we’ll be using TypeScript to build our action, which requires Node. Out of the box GitHub supports a few environments for your…","fields":{"slug":"/releasing-github-actions/"},"frontmatter":{"excerpt":"Once you've made some amazing GitHub Actions, you'll want to re-use them and share them with your friends. To do that you'll want to organize your project a little differently, publish and release them.","date":"January 31, 2020","title":"Releasing GitHub Actions"}}},{"node":{"excerpt":"GitHub Actions are still in beta and are changing quickly. But if you are looking to get started the possibilities are endless. This guide is mostly about pointing to documentation and exploring some fun ways to use GitHub Actions. In this post we’ll create a repository which contains a GitHub Action - built in TypeScript - and an associated workflow. In the action we’ll respond to push events and output some logging information. Technically, you don’t need a custom script to accomplish this; you could instead build a very simple workflow which runs  commands. Using a full script will allow us to explore more capabilities of GitHub Actions. We’ll also create an action that automatically responds to, and reacts to, issue comments. Before you read this it is important to note: starting with a template will save you a lot of time and setup. In this post, however, I am going to work through and explain all of the steps. Included in this post are some of the reasons I’ve chosen one particular setup and skipped another. When getting started with GitHub Actions it is difficult to understand how all of the pieces fit together, or why you might want to create and action for a particular task. Hopefully this post provides some helpful examples. That said, there are probably steps here that you’ve seen before, don’t care about, or just want to skip and that’s okay. In order to follow this, you’ll need a GitHub account. Additionally, you’ll need to sign up for the GitHub Actions beta. The examples will be in TypeScript. All of the code (and commits) are availble on GitHub: https://github.com/jeffrafter/example-github-action-typescript Documentation The documentation for GitHub Actions is really good (far more complete than this post) and is good to have on hand. You can learn how to build Actions, Workflows and core concepts; as well as dive deeply on using the toolkit, octokit and handling payloads. Automating your Workflow with GitHub Actions GitHub Package Toolkit Event Types & Payloads Rest API V3 octokit/rest.js Getting started First you want to create a folder for your project: We’ll be using TypeScript to build our action, which requires Node. Out of the box GitHub supports a few environments for your actions to run . There is built-in support for running actions built in JavaScript (using Node). So why did I choose to use TypeScript? It makes development a lot easier by providing compile-time checks and hints in my editor about methods and parameters…","fields":{"slug":"/working-with-github-actions/"},"frontmatter":{"excerpt":"GitHub Actions are still in beta and are changing quickly. But if you are looking to get started the possibilities are endless.","date":"September 19, 2019","title":"Working with GitHub Actions"}}},{"node":{"excerpt":"The Oculus Quest is entirely immersive and a blast to play with. Of course, the moment I put it on, I immediately wanted to make my own games and got started with Unity. There are a few blog posts and videos that helped me on my way.  Getting started To develop for you Oculus you’ll not only need an Oculus account but you may want to setup an Oculus Organiztion (free). Additionally (for my purposes), you’ll need a Unity account. I’m using a personal account (also free). Mac versus Windows I’m using a MacBook Pro. Many of the tutorials and videos you’ll find assume you’re working on Windows. This can create some challenges but the biggest challenges are around the platform support for the Oculus Quest itself. Oculus doesn’t make a version of it’s Oculus Desktop app (or libraries) available on MacOS. Because of this you’ll want to start with tutorials that are specific to the Mac and adjust. Unity & initial setup I followed a couple of tutorials for getting Unity Hub and Unity installed. I recommend: How to get started with Oculus Quest and Unity on macOS How to get started with Oculus Quest development in Unity If you prefer videos:  Learn Once I had the basics working, and could load games I built in Unity on my Quest, I wanted to do more. I found a set of fantastic tutorial videos by Valem, Quentin Valembois and was hooked. As I went through the videos I took notes and (with permission) am posting those here. While watching these videos, you might notice Valem is using the ▶ button to debug. This works because he is actually developing for the Rift in the videos (notice that the controllers are upside-down). In a later video on recreating Slenderman (at 1:47) he explains how to use the ▶ button while building for the Oculus Quest. Unfortunately that won’t work on MacOS because the Oculus plugin is not supported. There are notes on how to get this working at the end of this post.  A note on the Oculus Integration asset The Oculus Integration in the Unity Asset Store solves an amazing amount of problems for you. Unfortunately,\nthe updates are not necessarily backward compatible and it makes following tutorials difficult. Most\nof the tutorials listed here were for the 1.38 version. The current 1.39 version requires a few more steps. After you download and import the kit you’ll restart Unity. You should see a new menu for Oculus:  Choose  | . Choose  |  From your project search, find the newly created  and open it in your editor.\nYou’ll want to change  to  so…","fields":{"slug":"/oculus-quest/"},"frontmatter":{"excerpt":"Everyone wants to talk about consumer VR. I just want to make some games.","date":"July 25, 2019","title":"Developing for the Oculus Quest"}}},{"node":{"excerpt":"Updated: February 2020 Creating a static website involves an almost infinite set of choices. Among these is\nGatsby – a static site framework based on , ,  and\nmany other modern approaches. Gatsby is, in many ways, the JavaScript successor to\nJekyll. I’ve upgraded several sites to Gatsby (including this one) finding\na way to integrate TypeScript as part of the journey. In this post I am going to work through all of the pieces of a default Gatsby site and try to explain them along the way. Included in this post are some of the reasons why I’ve chosen one particular plugin or skipped another. Often – especially when you choose a default Gatsby starter – it is difficult to understand how all of the pieces fit together, or how you might build your own starter template. Hopefully this post provides some helpful examples. Also: the Gatsby documentation is extremely good. There is a\nfantastic tutorial, quick start and some recipes. I’ve relied on those and a host of other blogs when working on this\npost. In order to follow this, you’ll need access to a terminal (or console) and you’ll need Node, Node Version Manager, and git installed. All of the code (and commits) are available on GitHub: https://github.com/example-gatsby-typescript-blog/example-gatsby-typescript-blog.github.io Getting started To get started, we’ll follow the quick start. First, install the Gatsby CLI (command line interface): Next, we’ll want to create a new Gatsby site. In this post we’ll assume that our site is called (rather uninspiringly) . Run the following command (it will generate a new folder called  where you run the command): Change directory to newly created folder : The  command created a project folder and automatically installed our node modules and setup defaults. The project structure should look like: With this, we already have enough to run Gatsby and view our site. Run: This will start Gatsby in  mode. Open a browser to  and you should see:  The default covers the basics but isn’t very personalized. Let’s work on that now.  Configuring the node version Gatsby requires Node to run on your computer. If you have multiple local projects on your computer, you might run into a conflict about which Node version should be used. Node Version Manager solves this problem. After installing a Node Version Manager, check which version of Node you have installed: If you don’t have the version you want, find a remote version: This will show lots of versions. Find the last one with  (for Long…","fields":{"slug":"/gatsby-with-typescript/"},"frontmatter":{"excerpt":"Creating a static website involves an almost infinite set of choices. I've upgraded several sites to Gatsby (including this one) finding a way to integrate TypeScript as part of the journey. Gatsby leverages React, JSX, CSS-in-JS, GraphQL and many other modern approaches to building sites.","date":"May 25, 2019","title":"Building a Static Gatsby-based Website with TypeScript"}}}]}},"pageContext":{}}}