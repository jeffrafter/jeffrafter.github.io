{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/markdown/","webpackCompilationHash":"ff82b448ff05a0cfe069","result":{"data":{"site":{"siteMetadata":{"title":"Jeff Rafter"}},"allMarkdownRemark":{"totalCount":5,"edges":[{"node":{"excerpt":"Markdown: Syntax From https://raw.githubusercontent.com/sparanoid/almace-scaffolding/master/_app/_posts/note/2014-06-06-markdown-features-test.md  Indented Code Blocks  Liquid Tag with  Support {% highlight ruby linenos %}\ndef show\n@widget = Widget(params:id)\nrespond_to do |format|\nformat.html # show.html.erb\nformat.json { render json: @widget }\nend\nend\n{% endhighlight %}  GFM Code Blocks () SmartyPants “Aha! What’s up, man?” — Jony said.  Tables Name Upvotes Downvotes Abstentions Alice 10 11 2 Bob 4 3 1 Charlie 7 9 4 Totals 21 23 7  Intra-emphasis foobarbaz  Auto-link https://sparanoid.com/  Strikethroughs This is good bad.  Space after Headers This is not a header.  Superscripts This is the 2^(nd) time.  Footnotes This is a sentence.  ID 日本語タイトル Expected id should be .  ID 中文標題 Expected id should be .   An Important Announcement by Richard Ziade at Readability","fields":{"slug":"/example-markdown-features/"},"frontmatter":{"date":"2019-03-01T22:12:03.284Z","title":"Markdown Features Test With no Slug","excerpt":null}}},{"node":{"excerpt":"“It’s really hard to make Gifs.”  At the end of 2017 at GitHub we were workng on a secret research project: can you completely eliminate\nthe friction new developers face. Removing the development environment and the terminal was a start–understanding\nhow to use Git alone is a major barrier for new developers–but it is only a start. Our project,\ncalled “Tiny” internally, had of vision of development that was so effortless people would find\nthemselves “accidentally” coding. But first we needed a challenging problem where coding might be\nthe simplest solution. Animated Gifs were our problem.  History The GIF89A format is remarkably elegant. Netscape\nPatent\nLZW  Structure  A Tiny Project  Faster, Smaller, Better","fields":{"slug":"/gifs/"},"frontmatter":{"date":"2019-04-23T00:01:00","title":"Gifs","excerpt":null}}},{"node":{"excerpt":"Markdown: Syntax From https://raw.githubusercontent.com/mxstbr/markdown-test-file/master/TEST.md Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you\ncan see the source for it by adding ‘.text’ to the URL.  Overview Philosophy Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it’s been marked up with tags or formatting instructions. While\nMarkdown’s syntax has been influenced by several existing text-to-HTML\nfilters — including Setext, atx, Textile, reStructuredText,\nGrutatext, and EtText — the single biggest source of\ninspiration for Markdown’s syntax is the format of plain text email.  Markdown: Syntax From https://raw.githubusercontent.com/mxstbr/markdown-test-file/master/TEST.md Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you\ncan see the source for it by adding ‘.text’ to the URL. Overview Philosophy Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it’s been marked up with tags or formatting instructions. While\nMarkdown’s syntax has been influenced by several existing text-to-HTML\nfilters — including Setext, atx, Textile, reStructuredText,\nGrutatext, and EtText — the single biggest source of\ninspiration for Markdown’s syntax is the format of plain text email. Block Elements Paragraphs and Line Breaks A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line — a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be indented with spaces or tabs. The implication of the “one or more consecutive lines of text” rule is\nthat Markdown supports “hard-wrapped” text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType’s “Convert Line Breaks” option) which translate every line break\ncharacter in a paragraph into a  tag. When you do want to insert a  break tag using Markdown, you\nend a line with two or more spaces, then type return. Headers Markdown supports two styles of headers, Setext and atx. Optionally, you may “close” atx-style headers. This is purely\ncosmetic — you can use this if you think it looks better. The\nclosing hashes don’t even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) Blockquotes Markdown uses email-style  characters for blockquoting. If you’re\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a  before every line: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing. Markdown allows you to be lazy and only put the  before the first\nline of a hard-wrapped paragraph: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing. Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of : This is the first level of quoting. This is nested blockquote. Back to the first level. Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks: This is a header. This is the first list item. This is the second list item. Here’s some example code: Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu. Lists Markdown supports ordered (numbered) and unordered (bulleted) lists. Unordered lists use asterisks, pluses, and hyphens — interchangably\n— as list markers: Red Green Blue is equivalent to: Red Green Blue and: Red Green Blue Ordered lists use numbers followed by periods: Bird McHale Parish It’s important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is: If you instead wrote the list in Markdown like this: Bird McHale Parish or even: Bird McHale Parish you’d get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don’t have to. To make lists look nice, you can wrap items with hanging indents: Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing. But if you want to be lazy, you don’t have to: Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing. List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be indented by either 4 spaces\nor one tab: This is a list item with two paragraphs. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit. Aliquam hendrerit\nmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet\nvitae, risus. Donec sit amet nisl. Aliquam semper ipsum\nsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy: This is a list item with two paragraphs.   This is the second paragraph in the list item. You’re only required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit. Another item in the same list. To put a blockquote within a list item, the blockquote’s \ndelimiters need to be indented: A list item with a blockquote: This is a blockquote\ninside a list item. To put a code block within a list item, the code block needs\nto be indented twice — 8 spaces or two tabs: A list item with a code block: Code Blocks Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both  and  tags. To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. This is a normal paragraph: Here is an example of AppleScript: A code block continues until it reaches a line that is not indented\n(or the end of the article). Within a code block, ampersands () and angle brackets ( and )\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown — just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this: Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit’s also easy to use Markdown to write about Markdown’s own syntax.  Span Elements Links Markdown supports two style of links: inline and reference. In both styles, the link text is delimited by square brackets. To create an inline link, use a set of regular parentheses immediately\nafter the link text’s closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an optional\ntitle for the link, surrounded in quotes. For example: This is an example inline link. This link has no title attribute. Emphasis Markdown treats asterisks () and underscores () as indicators of\nemphasis. Text wrapped with one  or  will be wrapped with an\nHTML  tag; double ’s or ’s will be wrapped with an HTML\n tag. E.g., this input: single asterisks single underscores double asterisks double underscores Images You might have images that are embedded: Hack night Code To indicate a span of code, wrap it with backtick quotes ().\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example: Use the  function. Code can also be syntax highlighted:","fields":{"slug":"/example-markdown-it-markdown/"},"frontmatter":{"date":"2019-02-01T22:12:03.284Z","title":"Example Markdown from https://markdown-it.github.io/","excerpt":null}}},{"node":{"excerpt":"Markdown: Syntax From https://raw.githubusercontent.com/mxstbr/markdown-test-file/master/TEST.md Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you\ncan see the source for it by adding ‘.text’ to the URL.  Overview Philosophy Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it’s been marked up with tags or formatting instructions. While\nMarkdown’s syntax has been influenced by several existing text-to-HTML\nfilters — including Setext, atx, Textile, reStructuredText,\nGrutatext, and EtText — the single biggest source of\ninspiration for Markdown’s syntax is the format of plain text email.  Markdown: Syntax From https://raw.githubusercontent.com/mxstbr/markdown-test-file/master/TEST.md Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotes Lists Code Blocks Horizontal Rules Span Elements Links Emphasis Code Images Miscellaneous Backslash Escapes Automatic Links Note: This document is itself written using Markdown; you\ncan see the source for it by adding ‘.text’ to the URL. Overview Philosophy Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it’s been marked up with tags or formatting instructions. While\nMarkdown’s syntax has been influenced by several existing text-to-HTML\nfilters — including Setext, atx, Textile, reStructuredText,\nGrutatext, and EtText — the single biggest source of\ninspiration for Markdown’s syntax is the format of plain text email. Block Elements Paragraphs and Line Breaks A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line — a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be indented with spaces or tabs. The implication of the “one or more consecutive lines of text” rule is\nthat Markdown supports “hard-wrapped” text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType’s “Convert Line Breaks” option) which translate every line break\ncharacter in a paragraph into a  tag. When you do want to insert a  break tag using Markdown, you\nend a line with two or more spaces, then type return. Headers Markdown supports two styles of headers, Setext and atx. Optionally, you may “close” atx-style headers. This is purely\ncosmetic — you can use this if you think it looks better. The\nclosing hashes don’t even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) Blockquotes Markdown uses email-style  characters for blockquoting. If you’re\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a  before every line: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing. Markdown allows you to be lazy and only put the  before the first\nline of a hard-wrapped paragraph: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing. Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of : This is the first level of quoting. This is nested blockquote. Back to the first level. Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks: This is a header. This is the first list item. This is the second list item. Here’s some example code: Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu. Lists Markdown supports ordered (numbered) and unordered (bulleted) lists. Unordered lists use asterisks, pluses, and hyphens — interchangably\n— as list markers: Red Green Blue is equivalent to: Red Green Blue and: Red Green Blue Ordered lists use numbers followed by periods: Bird McHale Parish It’s important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is: If you instead wrote the list in Markdown like this: Bird McHale Parish or even: Bird McHale Parish you’d get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don’t have to. To make lists look nice, you can wrap items with hanging indents: Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing. But if you want to be lazy, you don’t have to: Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing. List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be indented by either 4 spaces\nor one tab: This is a list item with two paragraphs. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit. Aliquam hendrerit\nmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet\nvitae, risus. Donec sit amet nisl. Aliquam semper ipsum\nsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy: This is a list item with two paragraphs.   This is the second paragraph in the list item. You’re only required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit. Another item in the same list. To put a blockquote within a list item, the blockquote’s \ndelimiters need to be indented: A list item with a blockquote: This is a blockquote\ninside a list item. To put a code block within a list item, the code block needs\nto be indented twice — 8 spaces or two tabs: A list item with a code block: Code Blocks Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both  and  tags. To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. This is a normal paragraph: Here is an example of AppleScript: A code block continues until it reaches a line that is not indented\n(or the end of the article). Within a code block, ampersands () and angle brackets ( and )\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown — just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this: Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit’s also easy to use Markdown to write about Markdown’s own syntax.  Span Elements Links Markdown supports two style of links: inline and reference. In both styles, the link text is delimited by square brackets. To create an inline link, use a set of regular parentheses immediately\nafter the link text’s closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an optional\ntitle for the link, surrounded in quotes. For example: This is an example inline link. This link has no title attribute. Emphasis Markdown treats asterisks () and underscores () as indicators of\nemphasis. Text wrapped with one  or  will be wrapped with an\nHTML  tag; double ’s or ’s will be wrapped with an HTML\n tag. E.g., this input: single asterisks single underscores double asterisks double underscores Images You might have images that are embedded: Gatsby Code To indicate a span of code, wrap it with backtick quotes ().\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example: Use the  function. Code can also be syntax highlighted:","fields":{"slug":"/example-markdown/"},"frontmatter":{"date":"2019-02-01T22:12:03.284Z","title":"Example Markdown","excerpt":null}}},{"node":{"excerpt":"Tufte CSS provides tools to style web articles using the ideas demonstrated by\nEdward Tufte’s books and handouts. Tufte’s style is known for its simplicity,\nextensive use of sidenotes, tight integration of graphics with text, and\ncarefully chosen typography. Tufte CSS was created by Dave Liepmann and is now an Edward Tufte project.\nThe original idea was cribbed from\nTufte-LaTeX\nand R Markdown’s Tufte Handout format. We give hearty thanks to\nall the people who have contributed to those projects. If you see anything that Tufte CSS could improve, we welcome your contribution\nin the form of an issue or pull request on the GitHub project: tufte-css.\nPlease note the contribution guidelines. Finally, a reminder about the goal of this project. The web is not print.\nWebpages are not books. Therefore, the goal of Tufte CSS is not to say “websites\nshould look like this interpretation of Tufte’s books” but rather “here are some\ntechniques Tufte developed that we’ve found useful in print; maybe you can find\na way to make them useful on the web”. Tufte CSS is merely a sketch of one way\nto implement this particular set of ideas. It should be a starting point, not a\ndesign goal, because any project should present their information as best suits\ntheir particular circumstances.  Getting Started To use Tufte CSS, copy  and the  directory of font files to\nyour project directory, then add the following to your HTML document’s \nblock: Now you just have to use the provided CSS rules, and the Tufte CSS conventions\ndescribed in this document. For best results, View Source and Inspect Element\nfrequently.  Fundamentals Sections and Headings Organize your document with an  element inside your  tag. Inside\nthat, use  tags around each logical grouping of text and headings. Tufte CSS uses  for the document title,  with class  for the\ndocument subtitle,  for section headings, and  for low-level headings.\nMore specific headings are not supported. If you feel the urge to reach for a\nheading of level 4 or greater, consider redesigning your document: It is notable that the Feynman lectures (3 volumes) write about all of\nphysics in 1800 pages, using only 2 levels of hierarchical headings: chapters\nand A-level heads in the text. It also uses the methodology of\nsentences which then cumulate sequentially into paragraphs,\nrather than the grunts of bullet points. Undergraduate Caltech physics is very\ncomplicated material, but it didn’t require an elaborate hierarchy to\norganize. As a bonus, this excerpt regarding the use of headings provides an example of\nblock quotes. In Tufte CSS they are just lightly styled, semantically correct\nHTML using  and  elements. See page 20 of The Visual\nDisplay of Quantitative Information for an example in print. In his later books, Tufte starts each\nsection with a bit of vertical space, a non-indented paragraph, and the first\nfew words of the sentence set in small caps. For this we use a span with the\nclass , as demonstrated at the beginning of this paragraph. Vertical\nspacing is accomplished separately through  tags. Be consistent:\nthough we do so in this paragraph for the purpose of demonstration, do not\nalternate use of header elements and the  technique. Pick one\napproach and stick to it. Text Although paper handouts obviously have a pure white background, the web is\nbetter served by the use of slightly off-white and off-black colors. Tufte CSS\nuses  and  because they are nearly indistinguishable from\ntheir ‘pure’ cousins, but dial down the harsh contrast. We stick to the\ngreyscale for text, reserving color for specific, careful use in figures and\nimages. In print, Tufte has used the proprietary Monotype Bembo font. A similar\neffect is achieved in digital formats with the now open-source\nETBook, which Tufte CSS supplies with a  reference to a\n.ttf file. In case ETBook somehow doesn’t work, Tufte CSS shifts gracefully to\nother serif fonts like Palatino and Georgia. Also notice how Tufte CSS includes separate font files for bold (strong) and\nitalic (emphasis), instead of relying on the browser to mechanically transform\nthe text. This is typographic best practice. Links in Tufte CSS match the body text in color and do not change on mouseover\nor when clicked. Here is a dummy example that goes nowhere. These links are\nunderlined, since this is the most widely recognized indicator of clickable\ntext.  However, because most browsers’ default underlining does not clear\ndescenders and is so thick and distracting, the underline effect is instead\nachieved using CSS trickery involving background gradients instead of standard\n. Credit goes to Adam Schwartz for that technique. As always, these design choices are merely one approach that Tufte CSS provides\nby default. Other approaches, such as changing color on click or mouseover, or\nusing highlighting or color instead of underlining to denote links, could also\nbe made to work. The goal is to make sentences readable without interference\nfrom links, as well as to make links immediately identifiable even by casual web\nusers.  Epigraphs The English language … becomes ugly and inaccurate because our thoughts\nare foolish, but the slovenliness of our language makes it easier for us to\nhave foolish thoughts. For a successful technology, reality must take precedence over public\nrelations, for Nature cannot be fooled. I do not paint things, I paint only the differences between things. If you’d like to introduce your page or a section of your page with some quotes,\nuse epigraphs. Modeled after chapter epigraphs in Tufte’s books (particularly\nBeautiful Evidence), these are  elements with a bit of specialized\nstyling. Quoted text is italicized. The source goes in a  element inside\nthe . We have provided three examples in the epigraph of this\nsection, demonstrating shorter and longer quotes, with and without a paragraph\ntag, and showing how multiple quotes within an epigraph fit together with the\nuse of a wrapper class.  Sidenotes: Footnotes and Marginal Notes One of the most distinctive features of Tufte’s style is his extensive use of\nsidenotes. Sidenotes are like footnotes, except they don’t force the reader\nto jump their eye to the bottom of the page, but instead display off to the side\nin the margin. Perhaps you have noticed their use in this document already. You\nare very astute. Sidenotes are a great example of the web not being like print. On sufficiently\nlarge viewports, Tufte CSS uses the margin for sidenotes, margin notes, and\nsmall figures. On smaller viewports, elements that would go in the margin are\nhidden until the user toggles them into view. The goal is to present related but\nnot necessary information such as asides or citations as close as possible to\nthe text that references them. At the same time, this secondary information\nshould stay out of the way of the eye, not interfering with the progression of\nideas in the main text. Sidenotes consist of two elements: a superscript reference number that goes\ninline with the text, and a sidenote with content. To add the former, just put a\nlabel and dummy checkbox into the text where you want the reference to go, like\nso: You must manually assign a reference  to each side or margin note, replacing\n“sn-demo” in the  and the  attribute values with an appropriate\ndescriptor. It is useful to use prefixes like  for sidenotes and  for\nmargin notes. Immediately adjacent to that sidenote reference in the main text goes the\nsidenote content itself, in a  with class . This tag is also\ninserted directly in the middle of the body text, but is either pushed into the\nmargin or hidden by default. Make sure to position your sidenotes correctly by\nkeeping the sidenote-number label close to the sidenote itself. If you want a sidenote without footnote-style numberings, then you want a margin\nnote. On large screens, a margin note is just a sidenote that omits the\nreference number. This lessens the distracting effect taking away from the flow\nof the main text, but can increase the cognitive load of matching a margin note\nto its referent text. However, on small screens, a margin note is like a\nsidenote except its viewability-toggle is a symbol rather than a reference\nnumber. This document currently uses the symbol ⊕ (), but it’s up to\nyou. Margin notes are created just like sidenotes, but with the  class\nfor the content and the  class for the label and dummy checkbox.\nFor instance, here is the code for the margin note used in the previous\nparagraph: Figures in the margin are created as margin notes, as demonstrated in the next\nsection.  Figures Tufte emphasizes tight integration of graphics with text. Data, graphs, and\nfigures are kept with the text that discusses them. In print, this means they\nare not relegated to a separate page. On the web, that means readability of\ngraphics and their accompanying text without extra clicks, tab-switching, or\nscrolling. Figures should try to use the  element, which by default are constrained\nto the main column. Don’t wrap figures in a paragraph tag. Any label or margin\nnote goes in a regular margin note inside the figure. For example, most of the\ntime one should introduce a figure directly into the main flow of discussion,\nlike so: \n  But tight integration of graphics with text is central to Tufte’s work\neven when those graphics are ancillary to the main body of a text. In many of\nthose cases, a margin figure may be most appropriate. To place figures in the\nmargin, just wrap an image (or whatever) in a margin note inside a\np tag, as seen to the right of this paragraph. If you need a full-width figure, give it the  class. Make sure that’s\ninside an , and it will take up (almost) the full width of the screen.\nThis approach is demonstrated below using Edward Tufte’s English translation of\nthe Napoleon’s March data visualization. From Beautiful Evidence, page\n122-124.   Code Technical jargon, programming language terms, and code samples are denoted with\nthe  class, as I’ve been using in this document to denote HTML. Code needs\nto be monospace for formatting purposes and to aid in code analysis, but it must\nmaintain its readability. To those ends, Tufte CSS follows GitHub’s font\nselection, which shifts gracefully along the monospace spectrum from the elegant\nbut rare Consolas all the way to good old reliable Courier. Extended code examples should use a  tag with class . This adds\ncontrol over indentation and overflow as well:  ImageQuilts Tufte CSS provides support for Edward Tufte and Adam Schwartz’s ImageQuilts.\nSee the ET forum announcement thread for more on quilts. Some\nhave ragged edges, others straight. Include these images just as you would any\nother . This is an ImageQuilt surveying Chinese calligraphy, placed in a full-width\nfigure to accomodate its girth: Image of Chinese Calligraphy Here is an ImageQuilt of 47 animal sounds over and over, in a figure constrained\nto the main text region. This quilt has ragged edges, but the image itself is of\ncourse still rectangular. Image of animal sounds  Epilogue Many thanks go to Edward Tufte for leading the way with his work. It is only\nthrough his kind and careful editing that this project accomplishes what it\ndoes. All errors of implementation are of course mine.","fields":{"slug":"/tufte/"},"frontmatter":{"date":"2019-02-01T22:12:03.284Z","title":"Example Markdown","excerpt":null}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"markdown"}}}