{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/unity/","webpackCompilationHash":"904f9c41729f28b7cfe3","result":{"data":{"site":{"siteMetadata":{"title":"Jeff Rafter"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"For Father’s Day I got an Oculus Quest. It is entirely immersive and a blast to play with my kids. Of course, I immediately wanted to make my own games and got started with Unity. There are a few blog posts and videos that helped me on my way.  Getting started To develop for you Oculus you’ll not only need an Oculus account but you may want to setup an Oculus Organiztion (free). Additionally (for my purposes), you’ll need a Unity account. I’m using a personal account (also free). Mac versus Windows I’m using a MacBook Pro. Many of the tutorials and videos you’ll find assume you’re working on Windows. This can create some challenges but the biggest challenges are around the platform support for the Oculus Quest itself. Oculus doesn’t make a version of it’s Oculus Desktop app (or libraries) available on MacOS. Because of this you’ll want to start with tutorials that are specific to the Mac and adjust. Unity & initial setup I followed a couple of tutorials for getting Unity Hub and Unity installed. I recommend: How to get started with Oculus Quest and Unity on macOS How to get started with Oculus Quest development in Unity If you prefer videos:  Learn Once I had the basics working, and could load games I built in Unity on my Quest, I wanted to do more. I found a set of fantastic tutorial videos by Valem, Quentin Valembois and was hooked. As I went through the videos I took notes and (with permission) am posting those here. While watching these videos, you might notice Valem is using the ▶ button to debug. This works because he is actually developing for the Rift in the videos (notice that the controllers are upside-down). In a later video on recreating Slenderman (at 1:47) he explains how to use the ▶ button while building for the Oculus Quest. Unfortunately that won’t work on MacOS because the Oculus plugin is not supported. There are notes on how to get this working at the end of this post.  How to make a VR game in Unity - Part 1 - Setup, Hand presence, Grabbing object Setup the project Set Unknown Sources in the Oculus app (Windows only) In Unity Hub create a new 3D app Click Build Settings in the File menu Choose Android, click Switch Platform Change the Texture Compression to ASTC (not required, very slow) Open Player Settings: Set the Company and Product Name Remove  from the Graphics APIs list (Other Settings) Set the Package Name (Other Settings) Set the Minimum API Level to Android 4.4 ‘KitKat’ (Other Settings) Check VR Intergation (XR Settings) Add the Oculus Virtual Reality SDK (XR Settings) Download Oculus Integration from the Asset Store (slow) Import All from the Oculus Integration (very slow) Make the scene Create a 3D plane Create a 3D cube Create a red material and apply it to cube Create a black material and apply it to plane Delete the main camera Add  to the scene and move it back away from the cube Set Tracking Origin Type to  on the  child (note: if you are using the ▶ button, this should be ) Add the  component to the  Drag the  to the  Camera Rig field Check the Dynamic Height box Simple grabbing Add  prefab to the  of the  Add  and  prefab to the  Make the red cube wider (more like a table) Add an empty object called Cubes and add some cubes (6 of them) Select all of the cubes and add the  script Add the  component Build and run In Build Settings click Add Open Scenes Plug in your Oculus (you may need to “Trust this computer”) On Windows you should be able to click play On Mac click Build and Run (slow first build) From the comments: Colliding with the cubes and flying into the air? “Some of you have experienced a bug where the player fly when you put your hands under you. A really simple fix is to set the body and the hand to a different layer then in Physics settings uncheck the collision between the two layer in the collision layer matrix! :) Hope this will help some of you!” https://www.youtube.com/watch?v=sKQOlqNe_WY&lc=Ugy0IV2wmiRMywTkPk94AaABAg Note: setting up layer interactions happens more in the next section.  How to make a VR game in Unity - Part 2 - Custom Hand, Distance grab Setting up custom hands Remove the  you added Add  and  to the scene Select both, drag the  of the  to the Parent Transform property of the custom hands Find the  component in , expand the Materials section and set the material to  (same as the material for ) Expand the  material, change the Inner Color to aqua, increase the Rim Power Go to Project Settings | Time and change the Fixed Timestep to   Setting up distance grab Remove the custom hands Select all of the cubes Set the Collision Detection to Continuous Dynamic Remove the OVR Grabbable Script Add the Distance Grabbable Script Add  and  prefabs to scene Set the Player field to the  Set the  to the Parent Transform Set the Grab Object in Layer field to the number corresponding to your Cubes Layer (9) Set Obstruction Layer to -1 (none) Create an Empty Game Object and call it Grab Manager and add it to the  (this is different from the video, but solves the problem where only one box can be grabbed, also this is fixed in the following videos) Add the Sphere Collider component to the Grab Manager Set Is Trigger to true Set the Radius to something larger (3.5 is good) Adding the crosshairs Click the object that you want to have a crosshair on Once selected, create an Empty Game Object called Crosshair Add the Grabbable Crosshair Script to the object Create a child Quad object called “On” Remove the mesh collider of the quad Add the  Material Move it slightly behind the cube Duplicate the child Quad and call it “Off” Change the material to  Make it smaller by lowering the scale Change the material color to gray Drag  to the Targeted Crosshair field of the Crosshair script Drag  to the Enabled Crosshair field of the Crosshair script Make a prefab from the crosshair (drag from the scene to Assets) Drag the prefab into the remaining cubes  How to make a VR game in Unity - Part 3 - VR Shooter Setup the gun In the Asset Store find the asset: “Modern Guns: Handgun” published by NOKOBOT. Smash the download button. Click Import, then Import All Open the folder in Assets, Nokobot, ModernGuns_Handgun, Prefabs, Active guns Drag  prefab into the scene Scale it down (0.3) and move it to the left of the boxes Add a  component Add the  script Set the layer to the Grabbable layer (same as Cubes) Add a new Empty 3D object to the gun called  Add a new Cube to  that aligns to the barrel  Duplicate that cube to  and align the duplicate to the grip  Remove the Mesh Renderer of both cubes Remove the Cube (Mesh Filter) of both cubes Drag each cube to the Grab Points field of the Distance Grabbable object in the gun Add the crosshair prefab to the gun Scale the crosshair down a little bit Modify the Distance Grabbable script Click on the gun, go to the Distance Grabbable object, click the gear and choose Edit Script. Everywhere we are using the  check if null and return (): Modify the Grab Manager script Click on the Grab Manager in the  Click the gear icon on the Grab Manager Script and choose Edit Script Change  to : Fix the gun position and make it snap Note the position of the gun;l remember where it is (-1, 1.15, -0.23) Move the gun position to 0, 0, 0 (temporarily) Create an Empty Game Object called Hand Gun Offset Move the object to 0, 0, 0 then align it where the gun should be held  Drag the empty game object to Assets to make a prefab Replace the gun where you had it on the table Drag the Hand Gun Offset prefab to the gun Snap Offset Check Snap Position and Snap Orientation Fix the DistanceGrabber script for the left hand Click on the  Click on the gear icon in the Distance Grabber component and choose Edit Script Copy the else statement of  into  Handle shooting if grabbed Modify the  script replacing the  method with a new  method: Add a new  method to the  script (at line 50): Click on the gun object in the scene hierarchy Add a new component  as a New script Make the script: Set the Shooting Button field of the new script to  Modify some variables Click on the gun, change the Shot Power field to 1500 Double-click the  value in the Controller field of the Animator component Click on the Shooting node and set the speed to 10  How to make a VR game in Unity - Part 4 - User Interface The wrong way Right click on the Scene Hierarchy, select UI, then click Canvas Right click on the Canvas, select UI, then click Text Select the text, click on the box and select Stretch Mode  Change Left, Top, Pos Z, Right, Bottom all to 0 Change the font size to 135 Change the text to “Not VR Friendly Text” Select the Canvas, change the Render Mode to Screen Space - Camera Fixing it Select the Canvas, change the Render Mode to World Space Scale down the Canvas to 0.001, 0.001, 0.001 Reset the position to 0, 2, 1 Change the text of the Text node to “VR Friendly Text” Making a bullet display Move the Canvas component to a child of the gun Reset the position to 0, 0, 0 and then move and scale the canvas Change the text to 0 Modify the  script to track the number of bullets: Assign the Text component to the Bullet Text property Make an interactable button Create another Canvas in the scene Add a Button to the Canvas Select the Canvas, change the Render Mode to World Space Scale down the Canvas to 0.001, 0.001, 0.001 Reset the position to 0, 2, 1 Select the Button change the scale to 4, 4, 1 Select the Text node child of the Button Change the text to “More cubes!” Remove the Canvas Raycaster component from the Canvas Add the  script to the Canvas Delete the  from the scene Search your project for  and drag the prefab into the scene Drag the  game object (in UIHelpers) to Pointer field of the  component of the Canvas Set the Event Camera of the Canvas to the  of the  in the  Make the button do something Add a component to the Button game object called  (new script) Once created, click the gear icon and Edit Script: Drag the Cubes game object from the scene to the Assets in your project to create a prefab Drag the Cubes prefab to the  field of the  script on the Button In the Button object’s Button Script click the  in the On Click() section Drag the  script into the slot marked None Choose the  function Add Raycasting Select the Sphere under the object and increase the scale Select the  check the box for the Line Renderer Change the width in Postions to 50% (0.005) In the , click on the gear icon of the Laser Pointer (Script) and choose Edit Script Add  to the  private field: In the editor change the field to   How to make a VR game in Unity - Part 5 - Controller Vibration Add a gunfire sound Unless you already have a Desert Eagle sound effect here are some good choices (search for them in the Asset Store): Post Apocalypse Guns Demo by SOUND EARTH GAME AUDIO (AutoGun1p01.wav) Futuristic Gun SoundFX by MGWSOUNDDESIGN (GunShot9.wav) Fog of War Gun Sound FX Free by INTO THE VOID SOUND DESIGN (impacter.wav) Setup the Audio Source Select the gun game object and add an Audio Source component Uncheck Play on Awake Set the Spatial Blend to 3D Modify the  script to add : Haptic feedback Create an empty game object called Vibration Manager and reset the position Add a component to the object called  (new script) Edit the  script: Edit the  script and add the following line (just after the call to  in ): Custom haptic clips Edit the  script and add another version of the  method: Within the  script, replace the call to  with:  Debugging on MacOS and the ▶ button in Unity Note: the following is for 1.38 To get setup: Remove the Main Camera Set the Tracking Origin Type of the  to  Click ▶ and you’ll see:  This error is occuring because the  static variable is . You could remove this line, but it will only lead to another problem down the line. Instead fix the  by changing this line (for me it is line 41) of : to: Changing this eliminates the error, but the OVR Headset Emulator script will not work. The problem is that the  is never initialized and therefore the  is never initialized. The  method (at line 890 for me) looks like: The Unity Editor on Mac does not support the  (it is an unsupported platform). That’s fine, but let’s pretend it was initialized, even though it is unsupported (changing  to ): With this, the ▶ button should work for some quicker debugging. Note: nothing is running on the Oculus when you use that button, it is all faked. If you are using Oculus Avatar features (i.e., you’ve added a ) those are not currently emulated properly. When hitting the play button you can simply uncheck the LocalAvatar or you can implement checks for platform support before attempting to use the functionality.","fields":{"slug":"/oculus-quest/"},"frontmatter":{"date":"2019-07-25T00:01:00","title":"Developing for the Oculus Quest","excerpt":"Everyone wants to talk about consumer VR. I just want to make some games."}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"unity"}}}