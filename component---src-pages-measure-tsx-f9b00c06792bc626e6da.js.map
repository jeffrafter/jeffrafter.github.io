{"version":3,"sources":["webpack:///./src/pages/measure.tsx"],"names":["pageQuery","Measure","data","siteTitle","site","siteMetadata","title","siteKeywords","keywords","useState","isClient","setIsClient","recording","setRecording","samples","setSamples","ride","setRide","userName","setUserName","motionHandler","useRef","deviceInfo","navigator","userAgent","useEffect","current","e","acceleration","rotationRate","sample","timestamp","Date","now","accelX","x","accelY","y","accelZ","z","rotAlpha","alpha","rotBeta","beta","rotGamma","gamma","user","device","prev","requestPermissionAndListen","a","DeviceMotionEvent","requestPermission","alert","window","addEventListener","buildCSV","header","join","rows","map","s","replace","shareCSV","csv","blob","Blob","type","filesArray","File","canShare","files","share","text","console","error","lastSample","length","value","onChange","target","style","marginTop","onClick","removeEventListener","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","disabled","marginLeft"],"mappings":"w2CAuBA,IAoLaA,EAAY,aAWVC,UA/LkB,SAAC,GAAW,IAAVC,EAAU,EAAVA,KAC3BC,EAAYD,EAAKE,KAAKC,aAAaC,MACnCC,EAAeL,EAAKE,KAAKC,aAAaG,SAFD,EAIXC,oBAAS,GAAlCC,EAJoC,KAI1BC,EAJ0B,OAKTF,oBAAS,GAApCG,EALoC,KAKzBC,EALyB,OAMbJ,mBAAmB,IAA1CK,EANoC,KAM3BC,EAN2B,OAOnBN,mBAAS,IAA1BO,EAPoC,KAO9BC,EAP8B,OAQXR,mBAAS,IAAlCS,EARoC,KAQ1BC,EAR0B,KASrCC,EAAgBC,mBAEhBC,EAAaZ,EAAWa,UAAUC,UAAY,UAEpDC,qBAAU,WACRd,GAAY,GAGZS,EAAcM,QAAU,SAACC,GAAyB,gBACzCC,EAA8BD,EAA9BC,aAAcC,EAAgBF,EAAhBE,aACfC,EAAS,CACbd,OACAe,UAAWC,KAAKC,MAChBC,OAAM,UAAEN,aAAF,EAAEA,EAAcO,SAAhB,QAAqB,KAC3BC,OAAM,UAAER,aAAF,EAAEA,EAAcS,SAAhB,QAAqB,KAC3BC,OAAM,UAAEV,aAAF,EAAEA,EAAcW,SAAhB,QAAqB,KAC3BC,SAAQ,UAAEX,aAAF,EAAEA,EAAcY,aAAhB,QAAyB,KACjCC,QAAO,UAAEb,aAAF,EAAEA,EAAcc,YAAhB,QAAwB,KAC/BC,SAAQ,UAAEf,aAAF,EAAEA,EAAcgB,aAAhB,QAAyB,KACjCC,KAAM5B,EACN6B,OAAQzB,GAEVP,GAAW,SAAAiC,GAAI,kBAAQA,GAAR,CAAclB,UAE9B,CAACd,EAAME,EAAUI,IAEpB,IAAM2B,EAA0B,6BAAG,sBAAAC,EAAA,yDAE2B,mBAAhDC,kBAA0BC,kBAFL,gCAGXD,kBAA0BC,oBAHf,UAIlB,YAJkB,8BAK7BC,MAAM,4BALuB,wDAS/BA,MAAM,mCATyB,2BAYjCC,OAAOC,iBAAiB,eAAgBnC,EAAcM,SACtDb,GAAa,GAboB,4CAAH,qDAqB1B2C,EAAW,WACf,IAAMC,EAAS,CACb,YACA,SACA,SACA,SACA,WACA,UACA,WACA,OACA,OACA,UACAC,KAAK,KACDC,EAAO7C,EAAQ8C,KAAI,SAAAC,GAAC,MACxB,CACEA,EAAE9B,UACF8B,EAAE3B,OACF2B,EAAEzB,OACFyB,EAAEvB,OACFuB,EAAErB,SACFqB,EAAEnB,QACFmB,EAAEjB,SACFiB,EAAE7C,KARJ,IASM6C,EAAEf,KAAKgB,QAAQ,KAAM,MAT3B,QAUMD,EAAEd,OAAOe,QAAQ,KAAM,MAV7B,KAWEJ,KAAK,QAET,MAAO,CAACD,GAAD,SAAYE,IAAMD,KAAK,OAc1BK,EAAQ,6BAAG,oCAAAb,EAAA,yDACTc,EAAMR,IACNS,EAAO,IAAIC,KAAK,CAACF,GAAM,CAACG,KAAM,aAC9BC,EAAa,CAAC,IAAIC,KAAK,CAACJ,GAAV,cAA+BjD,EAA/B,OAA2C,CAACmD,KAAM,gBAHvD,WAIV,EAAA5C,WAAkB+C,gBAJR,aAIX,SAA8B,CAACC,MAAOH,KAJ3B,0CAMJ7C,UAAkBiD,MAAM,CAC7BD,MAAOH,EACP9D,MAAO,cACPmE,KAAM,QAAQzD,EAAV,cAA4BE,IATvB,uDAYXwD,QAAQC,MAAM,eAAd,MAZW,gCAebtB,MAAM,mDAfO,yDAAH,qDAmBRuB,EAAa9D,EAAQA,EAAQ+D,OAAS,GAE5C,OACE,kBAAC,IAAD,CAAQvE,MAAOH,GACb,kBAAC,IAAD,CAAMG,MAAM,aAAaE,SAAUD,IACnC,iCACE,kDAEA,4CAEE,6BACA,2BAAO4D,KAAK,OAAOW,MAAO5D,EAAU6D,SAAU,SAAApD,GAAC,OAAIR,EAAYQ,EAAEqD,OAAOF,WAG1E,6BACA,6BAEA,2BAAOG,MAAO,CAACC,UAAW,SAA1B,QAEE,6BACA,2BAAOf,KAAK,OAAOW,MAAO9D,EAAM+D,SAAU,SAAApD,GAAC,OAAIV,EAAQU,EAAEqD,OAAOF,WAGlE,2BACE,4BAAQK,QAASvE,EAzFH,WACpB0C,OAAO8B,oBAAoB,eAAgBhE,EAAcM,SACzDb,GAAa,IAuFsCoC,GAC1CrC,EAAY,iBAAmB,mBAEjCgE,GACC,oCACE,6BACA,6CACgBA,EAAW7C,UAD3B,UAEU6C,EAAW1C,OAFrB,KAE+B0C,EAAWxC,OAF1C,KAEoDwC,EAAWtC,OAF/D,QAGQsC,EAAWpC,SAHnB,KAG+BoC,EAAWlC,QAH1C,KAGqDkC,EAAWhC,WAIpE,4BAAQuC,QAnEI,WAClB,IAAMnB,EAAMR,IACNS,EAAO,IAAIC,KAAK,CAACF,GAAM,CAACG,KAAM,aAC9BkB,EAAMC,IAAIC,gBAAgBtB,GAC1Bf,EAAIsC,SAASC,cAAc,KACjCvC,EAAEwC,KAAOL,EACTnC,EAAEyC,SAAF,mBAAgC3E,EAAhC,OACAkC,EAAE0C,QACFN,IAAIO,gBAAgBR,IA2DgBS,SAA6B,IAAnBhF,EAAQ+D,OAAcI,MAAO,CAACc,WAAY,SAAlF,gBAGA,4BAAQZ,QAASpB,EAAU+B,SAA6B,IAAnBhF,EAAQ+D,OAAcI,MAAO,CAACc,WAAY,SAA/E,cAKF,2BACGnF,EAAS,iCAC2BE,EAAQ+D,OADnC,iCAE2B/D,EAAQ+D","file":"component---src-pages-measure-tsx-f9b00c06792bc626e6da.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\nimport {graphql} from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\n\ninterface Sample {\n  timestamp: number\n  accelX: number | null\n  accelY: number | null\n  accelZ: number | null\n  rotAlpha: number | null\n  rotBeta: number | null\n  rotGamma: number | null\n  ride: string\n  user: string\n  device: string\n}\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nconst Measure: React.FC<Props> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title\n  const siteKeywords = data.site.siteMetadata.keywords\n\n  const [isClient, setIsClient] = useState(false)\n  const [recording, setRecording] = useState(false)\n  const [samples, setSamples] = useState<Sample[]>([])\n  const [ride, setRide] = useState('')\n  const [userName, setUserName] = useState('')\n  const motionHandler = useRef<(e: DeviceMotionEvent) => void>()\n\n  const deviceInfo = isClient ? navigator.userAgent : 'unknown'\n\n  useEffect(() => {\n    setIsClient(true)\n\n    // define handler once\n    motionHandler.current = (e: DeviceMotionEvent) => {\n      const {acceleration, rotationRate} = e\n      const sample = {\n        ride,\n        timestamp: Date.now(),\n        accelX: acceleration?.x ?? null,\n        accelY: acceleration?.y ?? null,\n        accelZ: acceleration?.z ?? null,\n        rotAlpha: rotationRate?.alpha ?? null,\n        rotBeta: rotationRate?.beta ?? null,\n        rotGamma: rotationRate?.gamma ?? null,\n        user: userName,\n        device: deviceInfo,\n      } as Sample\n      setSamples(prev => [...prev, sample])\n    }\n  }, [ride, userName, deviceInfo])\n\n  const requestPermissionAndListen = async () => {\n    // iOS 13+ requires this\n    if (typeof (DeviceMotionEvent as any).requestPermission === 'function') {\n      const resp = await (DeviceMotionEvent as any).requestPermission()\n      if (resp !== 'granted') {\n        alert('Motion permission denied')\n        return\n      }\n    } else {\n      alert('Motion permission not available')\n      return\n    }\n    window.addEventListener('devicemotion', motionHandler.current!)\n    setRecording(true)\n  }\n\n  const stopListening = () => {\n    window.removeEventListener('devicemotion', motionHandler.current!)\n    setRecording(false)\n  }\n\n  const buildCSV = () => {\n    const header = [\n      'timestamp',\n      'accelX',\n      'accelY',\n      'accelZ',\n      'rotAlpha',\n      'rotBeta',\n      'rotGamma',\n      'ride',\n      'user',\n      'device',\n    ].join(',')\n    const rows = samples.map(s =>\n      [\n        s.timestamp,\n        s.accelX,\n        s.accelY,\n        s.accelZ,\n        s.rotAlpha,\n        s.rotBeta,\n        s.rotGamma,\n        s.ride,\n        `\"${s.user.replace(/\"/g, '\"\"')}\"`,\n        `\"${s.device.replace(/\"/g, '\"\"')}\"`,\n      ].join(','),\n    )\n    return [header, ...rows].join('\\n')\n  }\n\n  const downloadCSV = () => {\n    const csv = buildCSV()\n    const blob = new Blob([csv], {type: 'text/csv'})\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `motion-data-ride${ride}.csv`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const shareCSV = async () => {\n    const csv = buildCSV()\n    const blob = new Blob([csv], {type: 'text/csv'})\n    const filesArray = [new File([blob], `motion-ride${ride}.csv`, {type: 'text/csv'})]\n    if ((navigator as any).canShare?.({files: filesArray})) {\n      try {\n        await (navigator as any).share({\n          files: filesArray,\n          title: 'Motion Data',\n          text: `Ride ${ride} data from ${userName}`,\n        })\n      } catch (err) {\n        console.error('Share failed', err)\n      }\n    } else {\n      alert('Sharing not supported; please download instead.')\n    }\n  }\n\n  const lastSample = samples[samples.length - 1]\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title=\"Measure me\" keywords={siteKeywords} />\n      <article>\n        <h2>ðŸŽ¢ Motion Recorder</h2>\n\n        <label>\n          Your name:\n          <br />\n          <input type=\"text\" value={userName} onChange={e => setUserName(e.target.value)} />\n        </label>\n\n        <br />\n        <br />\n\n        <label style={{marginTop: '1rem'}}>\n          Ride:\n          <br />\n          <input type=\"text\" value={ride} onChange={e => setRide(e.target.value)} />\n        </label>\n\n        <p>\n          <button onClick={recording ? stopListening : requestPermissionAndListen}>\n            {recording ? 'Stop Recording' : 'Start Recording'}\n          </button>\n          {lastSample && (\n            <>\n              <br />\n              <pre>\n                Last sample: {lastSample.timestamp}\n                Accel: {lastSample.accelX}, {lastSample.accelY}, {lastSample.accelZ}\n                Rot: {lastSample.rotAlpha}, {lastSample.rotBeta}, {lastSample.rotGamma}\n              </pre>\n            </>\n          )}\n          <button onClick={downloadCSV} disabled={samples.length === 0} style={{marginLeft: '1rem'}}>\n            Download CSV\n          </button>\n          <button onClick={shareCSV} disabled={samples.length === 0} style={{marginLeft: '1rem'}}>\n            Share CSV\n          </button>\n        </p>\n\n        <p>\n          {recording\n            ? `Recordingâ€¦ samples collected: ${samples.length}`\n            : `Not recording. Total samples: ${samples.length}`}\n        </p>\n      </article>\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n      keywords: [string]\n    }\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        keywords\n      }\n    }\n  }\n`\n\nexport default Measure\n"],"sourceRoot":""}