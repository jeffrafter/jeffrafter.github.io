{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["Bio","query","render","data","site","siteMetadata","description","social","href","twitter","rel","instagram","github","Container","styled","pageQuery","Index","siteTitle","title","siteKeywords","keywords","posts","allMarkdownRemark","edges","className","map","node","excerpt","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html"],"mappings":"4IA0DeA,IA1CO,kBACpB,kBAAC,cAAD,CACEC,MAAK,aAcLC,OAAQ,SAACC,GAAqD,MAC9BA,EAAKC,KAAKC,aAAjCC,EADqD,EACrDA,YAAaC,EADwC,EACxCA,OACpB,OACE,6BACE,4BAAKD,GACL,4CAEE,6BACA,uBAAGE,KAAMD,EAAOE,QAASC,IAAI,uBAA7B,WAGC,MACD,uBAAGF,KAAMD,EAAOI,UAAWD,IAAI,uBAA/B,aAGC,MACD,uBAAGF,KAAMD,EAAOK,OAAQF,IAAI,uBAA5B,aA/BV,W,mRCTF,IAAMG,EAAYC,YAAO,MAAPA,CAAH,KA+DFC,EAAY,aA6BVC,UAtFgB,SAAC,GAAW,IAAVb,EAAU,EAAVA,KACzBc,EAAYd,EAAKC,KAAKC,aAAaa,MACnCC,EAAehB,EAAKC,KAAKC,aAAae,SACtCC,EAAQlB,EAAKmB,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQL,MAAOD,GACb,kBAAC,IAAD,CAAMC,MAAOD,EAAWG,SAAUD,IAClC,kBAAC,IAAD,MACA,kBAACN,EAAD,KACE,iCACE,yBAAKW,UAAS,gBACXH,EAAMI,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLC,EAAUD,EAAKE,YAAYD,SAAWD,EAAKC,QAC3CT,EAAQQ,EAAKE,YAAYV,OAASQ,EAAKG,OAAOC,KACpD,OACE,yBAAKC,IAAKL,EAAKG,OAAOC,MACpB,4BACE,kBAAC,OAAD,CAAME,GAAIN,EAAKG,OAAOC,MAAOZ,IAE/B,+BAAQQ,EAAKE,YAAYK,MACzB,uBAAGC,wBAAyB,CAACC,OAAQR,KACrC,uC","file":"component---src-pages-index-tsx-8c0fa96d2b2e2db049f0.js","sourcesContent":["import React from 'react'\nimport {StaticQuery, graphql} from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string\n      social: {\n        twitter: string\n        instagram: string\n        github: string\n      }\n    }\n  }\n}\n\nconst Bio: React.FC = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            description\n            social {\n              twitter\n              instagram\n              github\n            }\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const {description, social} = data.site.siteMetadata\n      return (\n        <div>\n          <h1>{description}</h1>\n          <p>\n            By Jeff Rafter\n            <br />\n            <a href={social.twitter} rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n            {' / '}\n            <a href={social.instagram} rel=\"noopener noreferrer\">\n              Instagram\n            </a>\n            {' / '}\n            <a href={social.github} rel=\"noopener noreferrer\">\n              GitHub\n            </a>\n          </p>\n        </div>\n      )\n    }}\n  />\n)\n\nexport default Bio\n","import React from 'react'\nimport {Link, graphql} from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport Bio from '../components/bio'\nimport {styled} from '../styles/theme'\n\nconst Container = styled('div')``\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nconst Index: React.FC<Props> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title\n  const siteKeywords = data.site.siteMetadata.keywords\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title={siteTitle} keywords={siteKeywords} />\n      <Bio />\n      <Container>\n        <article>\n          <div className={`page-content`}>\n            {posts.map(({node}) => {\n              const excerpt = node.frontmatter.excerpt || node.excerpt\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <div key={node.fields.slug}>\n                  <h3>\n                    <Link to={node.fields.slug}>{title}</Link>\n                  </h3>\n                  <small>{node.frontmatter.date}</small>\n                  <p dangerouslySetInnerHTML={{__html: excerpt}} />\n                  <br />\n                </div>\n              )\n            })}\n          </div>\n        </article>\n      </Container>\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n      keywords: [string]\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          excerpt?: string\n          date: string\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        keywords\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 2500)\n          fields {\n            slug\n          }\n          frontmatter {\n            excerpt\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index\n"],"sourceRoot":""}